
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import { Profile } from '@/types/userTypes';

export const useClassManagement = (user: Profile | null, setUser: (user: Profile | null) => void) => {
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const getClasses = async () => {
    if (!user) return [];
    
    setIsLoading(true);
    try {
      const { data, error } = await supabase
        .rpc('get_teacher_classes', { teacher_id_param: user.id });
      
      if (error) {
        console.error('Error fetching classes:', error);
        toast.error('Failed to load classes');
        return [];
      }
      
      return data || [];
    } catch (error) {
      console.error('Error in getClasses:', error);
      toast.error('Failed to load classes');
      return [];
    } finally {
      setIsLoading(false);
    }
  };

  const createClass = async (name: string, description: string) => {
    if (!user) {
      toast.error('You must be logged in to create a class');
      return null;
    }
    
    setIsLoading(true);
    try {
      // Add the class_code field with null value so the database trigger will generate it
      const { data, error } = await supabase
        .from('classes')
        .insert({
          name: name,
          description: description,
          teacher_id: user.id,
          class_code: null // This will be generated by database trigger
        })
        .select()
        .single();
      
      if (error) {
        console.error('Error creating class:', error);
        toast.error('Failed to create class');
        return null;
      }
      
      toast.success('Class created successfully');
      return data;
    } catch (error) {
      console.error('Error in createClass:', error);
      toast.error('Failed to create class');
      return null;
    } finally {
      setIsLoading(false);
    }
  };

  const getClassStudents = async (classId: string) => {
    if (!user) return [];
    
    setIsLoading(true);
    try {
      const { data, error } = await supabase
        .from('class_enrollments')
        .select(`
          student_id,
          profiles:student_id(id, name, email)
        `)
        .eq('class_id', classId);
        
      if (error) {
        console.error('Error fetching class students:', error);
        toast.error('Failed to load students');
        return [];
      }
      
      return data?.map(enrollment => enrollment.profiles) || [];
    } catch (error) {
      console.error('Error in getClassStudents:', error);
      toast.error('Failed to load students');
      return [];
    } finally {
      setIsLoading(false);
    }
  };

  const addStudentToClass = async (classId: string, studentId: string) => {
    if (!user) {
      toast.error('You must be logged in to add students');
      return false;
    }
    
    setIsLoading(true);
    try {
      // Check if the student is already in the class
      const { data: existingEnrollment, error: checkError } = await supabase
        .from('class_enrollments')
        .select('*')
        .eq('class_id', classId)
        .eq('student_id', studentId)
        .maybeSingle();
        
      if (checkError) {
        console.error('Error checking existing enrollment:', checkError);
        toast.error('Failed to add student to class');
        return false;
      }
      
      if (existingEnrollment) {
        toast.info('Student is already in this class');
        return true; // Already enrolled, so technically it's a success
      }
      
      // Add the student to the class
      const { error } = await supabase
        .from('class_enrollments')
        .insert({
          class_id: classId,
          student_id: studentId
        });
        
      if (error) {
        console.error('Error adding student to class:', error);
        toast.error('Failed to add student to class');
        return false;
      }
      
      toast.success('Student added to class');
      return true;
    } catch (error) {
      console.error('Error in addStudentToClass:', error);
      toast.error('Failed to add student to class');
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const removeStudentFromClass = async (classId: string, studentId: string) => {
    if (!user) {
      toast.error('You must be logged in to remove students');
      return false;
    }
    
    setIsLoading(true);
    try {
      const { error } = await supabase
        .from('class_enrollments')
        .delete()
        .eq('class_id', classId)
        .eq('student_id', studentId);
        
      if (error) {
        console.error('Error removing student from class:', error);
        toast.error('Failed to remove student from class');
        return false;
      }
      
      toast.success('Student removed from class');
      return true;
    } catch (error) {
      console.error('Error in removeStudentFromClass:', error);
      toast.error('Failed to remove student from class');
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  return {
    isLoading,
    getClasses,
    createClass,
    getClassStudents,
    addStudentToClass,
    removeStudentFromClass
  };
};
